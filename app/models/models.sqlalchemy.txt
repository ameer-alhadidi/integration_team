from sqlalchemy import Column, ForeignKey,Integer,String,DateTime, Enum
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from datetime import datetime
from enum import Enum as pyEnum

from ..database import Base

class EntityType(str,pyEnum):
    Internal = "Internal"
    Government = "Government"
    Company = "Company"

class EnvironmentType(str,pyEnum):
    Development = "Development"
    Staging = "Staging"
    Production = "Production"
    
class Contact(Base):
    __tablename__ = "contact"
    id = Column(Integer, primary_key=True, index=True, nullable=False)
    name = Column(String,index=True)
    email = Column(String,index=True)
    mobile_number = Column(String,nullable=True)
    office_number = Column(String,nullable=True)
    entity_id = Column(Integer, ForeignKey("entity.id"))
    entity = relationship("Entity", back_populates="contacts")

    created_by = Column(String,nullable=True) 
    updated_by = Column(String,nullable=True)
    created_at = Column("created_at", DateTime, default=datetime.now())
    updated_at = Column("updated_at", DateTime, default=datetime.now(), onupdate=datetime.now())

class Entity(Base):
    __tablename__ = "entity"
    id = Column(Integer, primary_key=True, index=True)
    name_en = Column(String, index=True)
    name_arb = Column(String)
    ABBR = Column(String)
    entity_type = Column(Enum(EntityType)) 
    #environment = Column(String)
    contacts = relationship("Contact", back_populates="entity")
    ports = relationship("Port", back_populates="entity")
    
    consumer_certificates = relationship("Certificate", back_populates="consumer_entity")
    user_accounts = relationship("UserAccount", back_populates="entity")

    created_by = Column(String,nullable=True) 
    updated_by = Column(String,nullable=True)
    created_at = Column("created_at", DateTime, default=datetime.now())
    updated_at = Column("updated_at", DateTime, default=datetime.now(), onupdate=datetime.now())


class Envionment(Base):
    __tablename__ = "port"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String)
    ip_address = Column(String)
    enviornment_type = Column(Enum(EnvironmentType)) 
    port = relationship("Port", back_populates="environment")

class Port(Base):
    __tablename__ = "port"
    id = Column(Integer, primary_key=True, index=True)
    number = Column(Integer)
    environment_id = Column(Integer, ForeignKey("environment.id"))
    environment = relationship("Port", back_populates="ports")
    service_access = Column(String)
    allowed_access = Column(String)

    entity_id = Column(Integer, ForeignKey("entity.id"))
    entity = relationship("Entity", back_populates="ports")

    created_by = Column(String, nullable=True)
    updated_by = Column(String, nullable=True)
    created_at = Column("created_at", DateTime, default=datetime.now())
    updated_at = Column("updated_at", DateTime, default=datetime.now(), onupdate=datetime.now())

class UserAccount(Base):
    __tablename__ = "user_account"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    roles = Column(String)
    entity_id = Column(Integer, ForeignKey("entities.id"))
    entity = relationship("Entity", back_populates="user_accounts")
    certificates = relationship("CertificateM", back_populates="user_account")
    created_by = Column(String, nullable=True)
    updated_by = Column(String, nullable=True)
    created_at = Column("created_at", DateTime, default=datetime.now())
    updated_at = Column("updated_at", DateTime, default=datetime.now(), onupdate=datetime.now())


    
class Certificate(Base):
    __tablename__ = "digital_certificate"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    serial_number= Column(String, index=True)
    issuer_name= Column(String, index=True)
    subject_name= Column(String, index=True)
    expiry_date = Column(String)
    entity_id = Column(Integer, ForeignKey("entity.id"))
    entity = relationship("Entity", back_populates="certificates")
    consumer_entity_id = Column(Integer, ForeignKey("entities.id"))
    consumer_entity = relationship("Entity", back_populates="consumer_certificates")
    user_account_id = Column(Integer, ForeignKey("user_account.id"))
    user_account = relationship("UserAccount", back_populates="certificates")
    created_by = Column(String, nullable=True)
    updated_by = Column(String, nullable=True)
    created_at = Column("created_at", DateTime, default=datetime.now())
    updated_at = Column("updated_at", DateTime, default=datetime.now(), onupdate=datetime.now())


